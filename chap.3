생성 패턴(creational pattern)은 인스턴스를 만드는 절차를 추상화하는 패턴
이 범주에 해당하는 패턴은 객체를 생성/합성하는 방법이나 객체의 표현 방법과(소프트웨어) 시스템을 분리해줍니다. => 인터페이스와 구현
클래스 생성 패턴이 인스턴스로 만들 클래스를 다양하게 만들기 위한 용도로 상속을 사용하는 반면
객체 생성 패턴은 인스턴스화 작업을 다른 객체에게 떠넘길 수도 있습니다. => 잘 이해안감, 복합에 대한 얘기같음

=====> 생성 패턴 정의

생성 패턴은 시스템이 상속보다는 복합 방법을 사용하는 쪽으로 진화되어 가면서 더 중요해지고 있습니다.
이 때문에 고정된 행동 집합을 정의하는 것보다는, 더 복잡한 행동을 만드는데 필요한 구성요소가 될  수 있는 기본적인 행동 집합을
정의하는 쪽에 더 많은 관심과 노력이 들어가고 있습니다. => 상속이 아니라 복합을 위해서 기본 구성
그러므로 특정 행동을 수행하는 클래스를 만들려면 단순하게 하나의 클래스를 인스턴스화하는 일 이상의 품이 들어갑니다. => 복합될 구조를 생각해야한다고 이해

=====> 생성 패턴의 용도와 구성

생성 패턴이 나오면 항상 따라다니는 이야기가 두 개 있습니다.
첫째, 생성 패턴은 시스템이 어떤 구체 클래스를 사용하는지에 대한 정보를 캡슐화합니다.
둘째, 생성 패턴은 이들 클래스의 인스턴스들이 어떻게 만들고 어떻게 서로 맞붙는지에 대한 부분을 완전히 가려줍니다.
결론적으로, 생성 패턴을 이용하면 무엇이 생성되고, 누가 이것을 생성하며, 이것이 어떻게 생성되는지, 언제 생성할 것인지
결정하는데 유연성을 확보할 수 있게 됩니다.
=> 인터페이스와 구현이 분리되어 결합도가 낮아짐 => 유연성

=====> 생성 패턴의 조건과 목표

생성 패턴으로 분류되는 패턴은 여러 개인데, 이런 여러 생성 패턴들은 서로 보완적일 수도 있고 선택되기 위해 서로 경쟁적일 수도 있습니다. => 패턴끼리 보완되거나 비슷할수 있다.
즉, 동일한 문제 해결을 위해서 어떤 생성 패턴을 사용해야 할지 결정을 내리기 어렵습니다. => 어떤 문제에 어떤 패턴을 사용할지 명확하다기보단 스스로 선택하고 장단점을 취해야한다고 생각이 듦

=====> 생성 패턴의 선택 기준

인스턴스를 생성하고 복합하는 방법에 해당하는 부분과 이들 인스턴스를 사용하는 프로그램을 분리하고자 할 때 어떤 패턴을 적용해야 하는지 판단하기 어렵습니다.
예를 들어, 원형 패턴과 추상 팩토리 패턴 중 무엇을 선택할지 고민해야 할 때가 있습니다.
어떨 때는 또 이들이 서로 보완적일 수도 있지요.
=> 하나의 패턴만으로 해결할 수도 있지만, 여러개의 패턴을 복합적으로 사용해 문제를 해결할 수도 있다.
예를 들어, 빌더 패턴은 어떤 구성요소를 만들지 구현하는 데에 다른 생성 패턴 중 하나를 사용할 수 있습니다.
=> 이미 패턴이라는 것 자체가 다른 패턴을 기반으로 한 '복합'일수도 있다.
원형 패턴은 자기 자신의 구현을 위해 단일체 패턴을 사용하기도 합니다.

생성 패턴 간에는 매우 밀접한 관련성이 있기 때문에, 이들 간의 공통점과 차이점을 중심으로 다섯 개의 패턴을 공부하기로 하겠습니다.
그리고 하나의 예제를 통해 각 패턴의 설명을 진행할까 합니다.

=====> 읽고 이제 패턴에 대해서 하나씩 정리
